import{_ as s,c as i,a4 as e,o as t}from"./chunks/framework.DSDFBGki.js";const n="/assets/interact-1.CvoeYWtQ.png",l="/assets/interact-2.DnBmfFLo.png",r="/assets/interact-3.BNhdW4Bi.png",p="/assets/renderer.BSf6If59.png",h="/assets/valueJS.DCBTMSq7.png",o="/assets/serve-video.B0dE2__y.png",d="/assets/memory.Dv8ij2aK.png",c="/assets/set-NODE_OPTIONS.zkK6TWHP.png",v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/start/more.md","filePath":"guide/start/more.md"}'),k={name:"guide/start/more.md"};function g(m,a,u,b,y,x){return t(),i("div",null,a[0]||(a[0]=[e('<h2 id="启动报错" tabindex="-1">启动报错 <a class="header-anchor" href="#启动报错" aria-label="Permalink to &quot;启动报错&quot;">​</a></h2><p>现在不使用 <code>pnpm</code> 进行依赖安装会报错，请卸载旧依赖，并重新安装依赖。 如果还是不行就将 <code>node</code> 版本切换到 <code>16.14</code> 左右的版本，再尝试启动。</p><h2 id="注意数据格式" tabindex="-1">注意数据格式 <a class="header-anchor" href="#注意数据格式" aria-label="Permalink to &quot;注意数据格式&quot;">​</a></h2><p>为避免各类异常情况发生, config.ts -&gt; option 中的数据源字段请务必使用: <code>dataset</code> 键名</p><h2 id="创建矩形" tabindex="-1">创建矩形 <a class="header-anchor" href="#创建矩形" aria-label="Permalink to &quot;创建矩形&quot;">​</a></h2><p>GoView 没有专门的矩形，但是可以直接使用 <code>文字</code> 图表来进行矩形的创建。</p><ul><li>将文本清空，X/Y 轴的内边距就是矩形的宽与高</li><li>背景就是矩形的颜色</li><li>圆角也是同理</li></ul><h2 id="使用联动组件" tabindex="-1">使用联动组件 <a class="header-anchor" href="#使用联动组件" aria-label="Permalink to &quot;使用联动组件&quot;">​</a></h2><p>联动组件的使用前提是需要一个动态请求组件, 然后把联动组件更新动作回传的值给到动态请求的请求头里。现在支持的参数有限, 如果接口不兼容, 请后端配合一下。</p><p>比如先定义一个动态请求组件:</p><img src="'+n+'" alt="动态请求组件" style="border-radius:5px;"><p>然后在左侧 <code>信息 -&gt; 控件 -&gt; 下拉选择器</code> 的拖拽到页面中,并选择 <code>事件 -&gt; 新增交互</code></p><img src="'+l+'" alt="新增交互" style="border-radius:5px;"><p>预览的时候修改下拉选项就会去重新请求数据,并把最新选择数据放到参数中</p><img src="'+r+'" alt="新增交互" style="border-radius:5px;"><h2 id="预览模糊" tabindex="-1">预览模糊 <a class="header-anchor" href="#预览模糊" aria-label="Permalink to &quot;预览模糊&quot;">​</a></h2><ul><li>屏幕的比例和定义的比例不一致的同时开启了滤镜功能</li><li>若展示的比例一致，开启滤镜则不会模糊</li><li>若需要使用滤镜功能，并且屏幕不固定，建议使用 Y 轴/X 轴滚动的适配方式</li><li>后期新增了 svg 和 canvas 的渲染方式, 默认 svg 会好很多</li></ul><img src="'+p+'" alt="新增交互" style="border-radius:5px;"><h2 id="历史记录" tabindex="-1">历史记录 <a class="header-anchor" href="#历史记录" aria-label="Permalink to &quot;历史记录&quot;">​</a></h2><p>历史记录不支持所有操作，当前支持数量有限，使用的时候需要注意，请不要无脑 <code>Ctrl + Z</code>。 若想了解当前步骤已经存储的内容，请在工作台底部左侧的 <code>历史记录</code> 里进行查看。</p><h2 id="如何使用-sql-类型" tabindex="-1">如何使用 SQL 类型 <a class="header-anchor" href="#如何使用-sql-类型" aria-label="Permalink to &quot;如何使用 SQL 类型&quot;">​</a></h2><p>需要后端提供专门处理 SQL 语句的接口，key 前端为固定值，接口不支持 GET 类型。</p><h2 id="请求动态获取值" tabindex="-1">请求动态获取值 <a class="header-anchor" href="#请求动态获取值" aria-label="Permalink to &quot;请求动态获取值&quot;">​</a></h2><p>请求配置里的 value 支持 js 语句分析:</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>注意符合 js 语句格式, 只识别英文字符!</p></div><img src="'+h+`" alt="js 语句分析" style="border-radius:5px;"><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例子1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javascript：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例子2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javascript：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例子3（从全局取值）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javascript：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.xxx;</span></span></code></pre></div><h2 id="获取路由的参数" tabindex="-1">获取路由的参数 <a class="header-anchor" href="#获取路由的参数" aria-label="Permalink to &quot;获取路由的参数&quot;">​</a></h2><p>路由里面如果添加了额外的参数，有快捷方式可以获取：</p><p>如：<a href="http://xxxxx/#/chart/home/xxxxxx?AAA=1&amp;BBB=2" target="_blank" rel="noreferrer">http://xxxxx/#/chart/home/xxxxxx?AAA=1&amp;BBB=2</a></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.route.params</span></span></code></pre></div><h2 id="接口数据格式不对或提示参数错误或预览数据不会变化" tabindex="-1">接口数据格式不对或提示参数错误或预览数据不会变化 <a class="header-anchor" href="#接口数据格式不对或提示参数错误或预览数据不会变化" aria-label="Permalink to &quot;接口数据格式不对或提示参数错误或预览数据不会变化&quot;">​</a></h2><p>数据格式最好和 mock 返回格式一致，mock 接口在开发环境能够看到并使用</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyResponseType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //数据能放在这里最好</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>返回的数据需在 <code>data</code> 对象里，如果无法保证，请使用页面的【过滤器】来做提取处理，没有 <code>data</code> 字段，需从过滤器的 <code>res</code> 中去获取</strong></p><p>mock 接口：</p><ul><li>【图表】/mock/chartData</li><li>【文本】/mock/text</li><li>【0~100 整数】/mock/number/int</li><li>【0~1 小数】/mock/number/float</li><li>【图片地址】/mock/image</li><li>【排名列表】/mock/rankList</li><li>【滚动表格】/mock/scrollBoard</li><li>更多具体看代码</li></ul><h2 id="关于-datav" tabindex="-1">关于 DataV <a class="header-anchor" href="#关于-datav" aria-label="Permalink to &quot;关于 DataV&quot;">​</a></h2><p>本项目部分组件基于 DataV 源码编写，如：边框，装饰，滚动图表等相关部分。 DataV 是基于 <code>MIT</code> 协议开源的大屏组件 UI 库，详见：<a href="https://github.com/DataV-Team/Datav" target="_blank" rel="noreferrer">https://github.com/DataV-Team/Datav</a>。之所以进行重写主要是因为 <code>DataV</code> 对 <code>Vue3</code> 支持的不够友好，只能照着源码二次开发。</p><p>由于时间限制，部分图表还没完全重写过来，如有需要可能需要自行重写。</p><h2 id="后端部署问题" tabindex="-1">后端部署问题 <a class="header-anchor" href="#后端部署问题" aria-label="Permalink to &quot;后端部署问题&quot;">​</a></h2><p>请添加反馈群，并查看群文档中的视频教程</p><img src="`+o+'" alt="js 语句分析" style="border-radius:5px;"><h2 id="关于打包失败" tabindex="-1">关于打包失败 <a class="header-anchor" href="#关于打包失败" aria-label="Permalink to &quot;关于打包失败&quot;">​</a></h2><p>如果您没有修改过内存的大小，打包的时候会出现内存溢出的情况，是因为 node 默认的打包空间是 1G，但是在编译的时候是有概率超过 1G 空间大小的。报错如下图所示： <img src="'+d+'" alt="空间溢出" style="zoom:70%;border-radius:20px;"></p><p>解决方法：修改 node 可用空间</p><img src="'+c+'" alt="空间溢出" style="zoom:70%;border-radius:20px;"><h2 id="关于-win-平台动画失效修复" tabindex="-1">关于 Win 平台动画失效修复 <a class="header-anchor" href="#关于-win-平台动画失效修复" aria-label="Permalink to &quot;关于 Win 平台动画失效修复&quot;">​</a></h2><p>打开 Windows 的性能选项, 勾选 [调整为最佳外观]。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>按 win + q 或 win + r，搜 %windir%\\system32\\SystemPropertiesPerformance.exe 即可打开 [性能选项] 窗口</span></span></code></pre></div>',50)]))}const D=s(k,[["render",g]]);export{v as __pageData,D as default};
